package Spring.MongoSpring;

import java.util.HashSet;
import java.util.List;

import org.bson.Document;
import static com.mongodb.client.model.Filters.eq;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class MongoDbService implements DBService {
	
	private String host = "localhost";
	private int port = 27017;
	private String dbname = "Rohan";
	private MongoClient client;
	private MongoDatabase db;
	
	//Collections name
	private String countryCollection = "countries";
	private String stateCollection = "states";
	private String cityCollection = "cities";
	
	
	
	//Object creation
	
	//To use default values
	public MongoDbService()
	{
		startService();
	}
	
	//to change db and use default collection names
	public MongoDbService(String host , int port , String db) 
	{
		this.host = host;
		this.port = port;
		this.dbname = db;
		startService();
	}
	
	//to use our own database and collections
	public MongoDbService(String host , int port , String db , String country , String state , String city) 
	{
		this.host = host;
		this.port = port;
		this.dbname = db;
		this.countryCollection = country;
		this.stateCollection = state;
		this.cityCollection = city;
		startService();
	}
	
	//------------To start/stop Mongo DB services----------------------------
	
	
	//to initialize start service internally
	private void startService() {
		
		this.client = new MongoClient(host , port);
		client.getDatabase(dbname);
	}
	
	//to stop service
	public void stopService() {
		this.client.close();
	}
	
	
	//------------------Country related operations----------------------

	public boolean writeCountry(List<Country> list) {
		// TODO Auto-generated method stub
		return false;
	}
	
	
	//------------------State related operations------------------------

	
	private Document getStateInternal(Object value , String field)
	{
		MongoCollection<Document> collection = db.getCollection(stateCollection);
		
		return collection.find(eq("field" , "value")).first();
	}
	
	
	private String getStateId(String stateName)
	{
		Document stateDocument = getStateInternal(stateName, "_id");
		return stateDocument.get("_id").toString();
	}
	
	public boolean writeState(HashSet<State> StateList) {
		
		MongoCollection<Document> collection = db.getCollection(stateCollection);
		List<Document> stateDocument;
		for(State i:StateList){
			stateDocument.add(arg0)
		}
		
	}

	
	//---------------City Related Operations----------------------------------
	
	public boolean writeCity( List<City> list) {
		// TODO Auto-generated method stub
		return false;
	}

}
